{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { print } from \"graphql\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nfunction isLikeCloseEvent(val) {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\nvar GraphQLWsLink = function (_super) {\n  __extends(GraphQLWsLink, _super);\n  function GraphQLWsLink(client) {\n    var _this = _super.call(this) || this;\n    _this.client = client;\n    return _this;\n  }\n  GraphQLWsLink.prototype.request = function (operation) {\n    var _this = this;\n    return new Observable(function (observer) {\n      return _this.client.subscribe(__assign(__assign({}, operation), {\n        query: print(operation.query)\n      }), {\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n        error: function (err) {\n          if (err instanceof Error) {\n            return observer.error(err);\n          }\n          if (isLikeCloseEvent(err)) {\n            return observer.error(new Error(\"Socket closed with event \".concat(err.code, \" \").concat(err.reason || \"\")));\n          }\n          return observer.error(new ApolloError({\n            graphQLErrors: Array.isArray(err) ? err : [err]\n          }));\n        }\n      });\n    });\n  };\n  return GraphQLWsLink;\n}(ApolloLink);\nexport { GraphQLWsLink };","map":{"version":3,"mappings":";AA8BA,SAASA,KAAK,QAAQ,SAAS;AAG/B,SAASC,UAAU,QAAgC,kBAAU;AAC7D,SAASC,eAAe,EAAEC,UAAU,QAAQ,0BAAkB;AAC9D,SAASC,WAAW,QAAQ,uBAAe;AAS3C,SAASC,gBAAgB,CAACC,GAAY;EACpC,OAAOJ,eAAe,CAACI,GAAG,CAAC,IAAI,MAAM,IAAIA,GAAG,IAAI,QAAQ,IAAIA,GAAG;AACjE;AAGA;EAAmCC;EACjC,uBAA4BC,MAAc;IAA1C,YACEC,iBAAO;IADmBC,YAAM,GAANF,MAAM;;EAElC;EAEOG,+BAAO,GAAd,UAAeC,SAAoB;IAAnC;IACE,OAAO,IAAIT,UAAU,CAAC,UAACU,QAAQ;MAC7B,OAAOH,KAAI,CAACF,MAAM,CAACM,SAAS,uBACrBF,SAAS;QAAEG,KAAK,EAAEf,KAAK,CAACY,SAAS,CAACG,KAAK;MAAC,IAC7C;QACEC,IAAI,EAAEH,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACJ,QAAQ,CAAC;QAClCK,QAAQ,EAAEL,QAAQ,CAACK,QAAQ,CAACD,IAAI,CAACJ,QAAQ,CAAC;QAC1CM,KAAK,EAAE,UAACC,GAAG;UACT,IAAIA,GAAG,YAAYC,KAAK,EAAE;YACxB,OAAOR,QAAQ,CAACM,KAAK,CAACC,GAAG,CAAC;;UAG5B,IAAIf,gBAAgB,CAACe,GAAG,CAAC,EAAE;YACzB,OAAOP,QAAQ,CAACM,KAAK,CAEnB,IAAIE,KAAK,CACP,mCAA4BD,GAAG,CAACE,IAAI,cAAIF,GAAG,CAACG,MAAM,IAAI,EAAE,CAAE,CAC3D,CACF;;UAGH,OAAOV,QAAQ,CAACM,KAAK,CACnB,IAAIf,WAAW,CAAC;YACdoB,aAAa,EAAEC,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG;WAC/C,CAAC,CACH;QACH;OACD,CACF;IACH,CAAC,CAAC;EACJ,CAAC;EACH,oBAAC;AAAD,CAAC,CApCkCnB,UAAU","names":["print","ApolloLink","isNonNullObject","Observable","ApolloError","isLikeCloseEvent","val","__extends","client","_super","_this","GraphQLWsLink","operation","observer","subscribe","query","next","bind","complete","error","err","Error","code","reason","graphQLErrors","Array","isArray"],"sources":["/Users/manojkumars/Documents/graphql_chat/client/node_modules/@apollo/src/link/subscriptions/index.ts"],"sourcesContent":["// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { print } from \"graphql\";\nimport type { Client } from \"graphql-ws\";\n\nimport { ApolloLink, Operation, FetchResult } from \"../core\";\nimport { isNonNullObject, Observable } from \"../../utilities\";\nimport { ApolloError } from \"../../errors\";\n\ninterface LikeCloseEvent {\n  /** Returns the WebSocket connection close code provided by the server. */\n  readonly code: number;\n  /** Returns the WebSocket connection close reason provided by the server. */\n  readonly reason: string;\n}\n\nfunction isLikeCloseEvent(val: unknown): val is LikeCloseEvent {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\n\n\nexport class GraphQLWsLink extends ApolloLink {\n  constructor(public readonly client: Client) {\n    super();\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable((observer) => {\n      return this.client.subscribe<FetchResult>(\n        { ...operation, query: print(operation.query) },\n        {\n          next: observer.next.bind(observer),\n          complete: observer.complete.bind(observer),\n          error: (err) => {\n            if (err instanceof Error) {\n              return observer.error(err);\n            }\n\n            if (isLikeCloseEvent(err)) {\n              return observer.error(\n                // reason will be available on clean closes\n                new Error(\n                  `Socket closed with event ${err.code} ${err.reason || \"\"}`\n                )\n              );\n            }\n\n            return observer.error(\n              new ApolloError({\n                graphQLErrors: Array.isArray(err) ? err : [err],\n              })\n            );\n          },\n        }\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}