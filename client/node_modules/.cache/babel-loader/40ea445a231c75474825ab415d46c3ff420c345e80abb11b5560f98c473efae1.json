{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { ApolloLink } from \"../core/index.js\";\nvar WebSocketLink = function (_super) {\n  __extends(WebSocketLink, _super);\n  function WebSocketLink(paramsOrClient) {\n    var _this = _super.call(this) || this;\n    if (paramsOrClient instanceof SubscriptionClient) {\n      _this.subscriptionClient = paramsOrClient;\n    } else {\n      _this.subscriptionClient = new SubscriptionClient(paramsOrClient.uri, paramsOrClient.options, paramsOrClient.webSocketImpl);\n    }\n    return _this;\n  }\n  WebSocketLink.prototype.request = function (operation) {\n    return this.subscriptionClient.request(operation);\n  };\n  return WebSocketLink;\n}(ApolloLink);\nexport { WebSocketLink };","map":{"version":3,"mappings":";AAAA,SAASA,kBAAkB,QAAuB,4BAA4B;AAE9E,SAASC,UAAU,QAAgC,kBAAU;AA4B7D;EAAmCC;EAGjC,uBACEC,cAAgE;IADlE,YAGEC,iBAAO;IAEP,IAAID,cAAc,YAAYH,kBAAkB,EAAE;MAChDK,KAAI,CAACC,kBAAkB,GAAGH,cAAc;KACzC,MAAM;MACLE,KAAI,CAACC,kBAAkB,GAAG,IAAIN,kBAAkB,CAC9CG,cAAc,CAACI,GAAG,EAClBJ,cAAc,CAACK,OAAO,EACtBL,cAAc,CAACM,aAAa,CAC7B;;;EAEL;EAEOC,+BAAO,GAAd,UAAeC,SAAoB;IACjC,OAAO,IAAI,CAACL,kBAAkB,CAACM,OAAO,CAACD,SAAS,CAE/C;EACH,CAAC;EACH,oBAAC;AAAD,CAAC,CAxBkCV,UAAU","names":["SubscriptionClient","ApolloLink","__extends","paramsOrClient","_super","_this","subscriptionClient","uri","options","webSocketImpl","WebSocketLink","operation","request"],"sources":["/Users/manojkumars/Documents/graphql_chat/client/node_modules/@apollo/src/link/ws/index.ts"],"sourcesContent":["import { SubscriptionClient, ClientOptions } from 'subscriptions-transport-ws';\n\nimport { ApolloLink, Operation, FetchResult } from '../core';\nimport { Observable } from '../../utilities';\n\nexport namespace WebSocketLink {\n  /**\n   * Configuration to use when constructing the subscription client (subscriptions-transport-ws).\n   */\n  export interface Configuration {\n    /**\n     * The endpoint to connect to.\n     */\n    uri: string;\n\n    /**\n     * Options to pass when constructing the subscription client.\n     */\n    options?: ClientOptions;\n\n    /**\n     * A custom WebSocket implementation to use.\n     */\n    webSocketImpl?: any;\n  }\n}\n\n// For backwards compatibility.\nexport import WebSocketParams = WebSocketLink.Configuration;\n\nexport class WebSocketLink extends ApolloLink {\n  private subscriptionClient: SubscriptionClient;\n\n  constructor(\n    paramsOrClient: WebSocketLink.Configuration | SubscriptionClient,\n  ) {\n    super();\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      this.subscriptionClient = paramsOrClient;\n    } else {\n      this.subscriptionClient = new SubscriptionClient(\n        paramsOrClient.uri,\n        paramsOrClient.options,\n        paramsOrClient.webSocketImpl,\n      );\n    }\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.subscriptionClient.request(operation) as Observable<\n      FetchResult\n    >;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}