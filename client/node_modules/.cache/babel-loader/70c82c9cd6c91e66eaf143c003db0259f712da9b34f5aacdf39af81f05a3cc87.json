{"ast":null,"code":"/**\n *\n * client\n *\n */\nimport { GRAPHQL_TRANSPORT_WS_PROTOCOL, CloseCode, MessageType, parseMessage, stringifyMessage } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n  const {\n    url,\n    connectionParams,\n    lazy = true,\n    onNonLazyError = console.error,\n    lazyCloseTimeout: lazyCloseTimeoutMs = 0,\n    keepAlive = 0,\n    disablePong,\n    connectionAckWaitTimeout = 0,\n    retryAttempts = 5,\n    retryWait = async function randomisedExponentialBackoff(retries) {\n      let retryDelay = 1000; // start with 1s delay\n      for (let i = 0; i < retries; i++) {\n        retryDelay *= 2;\n      }\n      await new Promise(resolve => setTimeout(resolve, retryDelay +\n      // add random timeout from 300ms to 3s\n      Math.floor(Math.random() * (3000 - 300) + 300)));\n    },\n    shouldRetry = isLikeCloseEvent,\n    isFatalConnectionProblem,\n    on,\n    webSocketImpl,\n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    },\n    jsonMessageReplacer: replacer,\n    jsonMessageReviver: reviver\n  } = options;\n  let ws;\n  if (webSocketImpl) {\n    if (!isWebSocket(webSocketImpl)) {\n      throw new Error('Invalid WebSocket implementation provided');\n    }\n    ws = webSocketImpl;\n  } else if (typeof WebSocket !== 'undefined') {\n    ws = WebSocket;\n  } else if (typeof global !== 'undefined') {\n    ws = global.WebSocket ||\n    // @ts-expect-error: Support more browsers\n    global.MozWebSocket;\n  } else if (typeof window !== 'undefined') {\n    ws = window.WebSocket ||\n    // @ts-expect-error: Support more browsers\n    window.MozWebSocket;\n  }\n  if (!ws) throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n  const WebSocketImpl = ws;\n  // websocket status emitter, subscriptions are handled differently\n  const emitter = (() => {\n    const message = (() => {\n      const listeners = {};\n      return {\n        on(id, listener) {\n          listeners[id] = listener;\n          return () => {\n            delete listeners[id];\n          };\n        },\n        emit(message) {\n          var _a;\n          if ('id' in message) (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n        }\n      };\n    })();\n    const listeners = {\n      connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n      opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n      connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n      ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n      pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n      message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n      closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n      error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : []\n    };\n    return {\n      onMessage: message.on,\n      on(event, listener) {\n        const l = listeners[event];\n        l.push(listener);\n        return () => {\n          l.splice(l.indexOf(listener), 1);\n        };\n      },\n      emit(event) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n        for (const listener of [...listeners[event]]) {\n          // @ts-expect-error: The args should fit\n          listener(...args);\n        }\n      }\n    };\n  })();\n  // invokes the callback either when an error or closed event is emitted,\n  // first one that gets called prevails, other emissions are ignored\n  function errorOrClosed(cb) {\n    const listening = [\n    // errors are fatal and more critical than close events, throw them first\n    emitter.on('error', err => {\n      listening.forEach(unlisten => unlisten());\n      cb(err);\n    }),\n    // closes can be graceful and not fatal, throw them second (if error didnt throw)\n    emitter.on('closed', event => {\n      listening.forEach(unlisten => unlisten());\n      cb(event);\n    })];\n  }\n  let connecting,\n    locks = 0,\n    lazyCloseTimeout,\n    retrying = false,\n    retries = 0,\n    disposed = false;\n  async function connect() {\n    // clear the lazy close timeout immediatelly so that close gets debounced\n    // see: https://github.com/enisdenjo/graphql-ws/issues/388\n    clearTimeout(lazyCloseTimeout);\n    const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : connecting = new Promise((connected, denied) => (async () => {\n      if (retrying) {\n        await retryWait(retries);\n        // subscriptions might complete while waiting for retry\n        if (!locks) {\n          connecting = undefined;\n          return denied({\n            code: 1000,\n            reason: 'All Subscriptions Gone'\n          });\n        }\n        retries++;\n      }\n      emitter.emit('connecting');\n      const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n      let connectionAckTimeout, queuedPing;\n      function enqueuePing() {\n        if (isFinite(keepAlive) && keepAlive > 0) {\n          clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n          queuedPing = setTimeout(() => {\n            if (socket.readyState === WebSocketImpl.OPEN) {\n              socket.send(stringifyMessage({\n                type: MessageType.Ping\n              }));\n              emitter.emit('ping', false, undefined);\n            }\n          }, keepAlive);\n        }\n      }\n      errorOrClosed(errOrEvent => {\n        connecting = undefined;\n        clearTimeout(connectionAckTimeout);\n        clearTimeout(queuedPing);\n        denied(errOrEvent);\n        if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {\n          socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n          socket.onerror = null;\n          socket.onclose = null;\n        }\n      });\n      socket.onerror = err => emitter.emit('error', err);\n      socket.onclose = event => emitter.emit('closed', event);\n      socket.onopen = async () => {\n        try {\n          emitter.emit('opened', socket);\n          const payload = typeof connectionParams === 'function' ? await connectionParams() : connectionParams;\n          // connectionParams might take too long causing the server to kick off the client\n          // the necessary error/close event is already reported - simply stop execution\n          if (socket.readyState !== WebSocketImpl.OPEN) return;\n          socket.send(stringifyMessage(payload ? {\n            type: MessageType.ConnectionInit,\n            payload\n          } : {\n            type: MessageType.ConnectionInit\n            // payload is completely absent if not provided\n          }, replacer));\n          if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {\n            connectionAckTimeout = setTimeout(() => {\n              socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n            }, connectionAckWaitTimeout);\n          }\n          enqueuePing(); // enqueue ping (noop if disabled)\n        } catch (err) {\n          emitter.emit('error', err);\n          socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n        }\n      };\n      let acknowledged = false;\n      socket.onmessage = _ref => {\n        let {\n          data\n        } = _ref;\n        try {\n          const message = parseMessage(data, reviver);\n          emitter.emit('message', message);\n          if (message.type === 'ping' || message.type === 'pong') {\n            emitter.emit(message.type, true, message.payload); // received\n            if (message.type === 'pong') {\n              enqueuePing(); // enqueue next ping (noop if disabled)\n            } else if (!disablePong) {\n              // respond with pong on ping\n              socket.send(stringifyMessage(message.payload ? {\n                type: MessageType.Pong,\n                payload: message.payload\n              } : {\n                type: MessageType.Pong\n                // payload is completely absent if not provided\n              }));\n\n              emitter.emit('pong', false, message.payload);\n            }\n            return; // ping and pongs can be received whenever\n          }\n\n          if (acknowledged) return; // already connected and acknowledged\n          if (message.type !== MessageType.ConnectionAck) throw new Error(`First message cannot be of type ${message.type}`);\n          clearTimeout(connectionAckTimeout);\n          acknowledged = true;\n          emitter.emit('connected', socket, message.payload); // connected = socket opened + acknowledged\n          retrying = false; // future lazy connects are not retries\n          retries = 0; // reset the retries on connect\n          connected([socket, new Promise((_, reject) => errorOrClosed(reject))]);\n        } catch (err) {\n          socket.onmessage = null; // stop reading messages as soon as reading breaks once\n          emitter.emit('error', err);\n          socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n        }\n      };\n    })()));\n    // if the provided socket is in a closing state, wait for the throw on close\n    if (socket.readyState === WebSocketImpl.CLOSING) await throwOnClose;\n    let release = () => {\n      // releases this connection\n    };\n    const released = new Promise(resolve => release = resolve);\n    return [socket, release, Promise.race([\n    // wait for\n    released.then(() => {\n      if (!locks) {\n        // and if no more locks are present, complete the connection\n        const complete = () => socket.close(1000, 'Normal Closure');\n        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n          // if the keepalive is set, allow for the specified calmdown time and\n          // then complete if the socket is still open.\n          lazyCloseTimeout = setTimeout(() => {\n            if (socket.readyState === WebSocketImpl.OPEN) complete();\n          }, lazyCloseTimeoutMs);\n        } else {\n          // otherwise complete immediately\n          complete();\n        }\n      }\n    }),\n    // or\n    throwOnClose])];\n  }\n  /**\n   * Checks the `connect` problem and evaluates if the client should retry.\n   */\n  function shouldRetryConnectOrThrow(errOrCloseEvent) {\n    // some close codes are worth reporting immediately\n    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [CloseCode.InternalServerError, CloseCode.InternalClientError, CloseCode.BadRequest, CloseCode.BadResponse, CloseCode.Unauthorized,\n    // CloseCode.Forbidden, might grant access out after retry\n    CloseCode.SubprotocolNotAcceptable,\n    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n    CloseCode.SubscriberAlreadyExists, CloseCode.TooManyInitialisationRequests\n    // 4499, // Terminated, probably because the socket froze, we want to retry\n    ].includes(errOrCloseEvent.code))) throw errOrCloseEvent;\n    // client was disposed, no retries should proceed regardless\n    if (disposed) return false;\n    // normal closure (possibly all subscriptions have completed)\n    // if no locks were acquired in the meantime, shouldnt try again\n    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000) return locks > 0;\n    // retries are not allowed or we tried to many times, report error\n    if (!retryAttempts || retries >= retryAttempts) throw errOrCloseEvent;\n    // throw non-retryable connection problems\n    if (!shouldRetry(errOrCloseEvent)) throw errOrCloseEvent;\n    // @deprecated throw fatal connection problems immediately\n    if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent)) throw errOrCloseEvent;\n    // looks good, start retrying\n    return retrying = true;\n  }\n  // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n  if (!lazy) {\n    (async () => {\n      locks++;\n      for (;;) {\n        try {\n          const [,, throwOnClose] = await connect();\n          await throwOnClose; // will always throw because releaser is not used\n        } catch (errOrCloseEvent) {\n          try {\n            if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n          } catch (errOrCloseEvent) {\n            // report thrown error, no further retries\n            return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n          }\n        }\n      }\n    })();\n  }\n  return {\n    on: emitter.on,\n    subscribe(payload, sink) {\n      const id = generateID(payload);\n      let done = false,\n        errored = false,\n        releaser = () => {\n          // for handling completions before connect\n          locks--;\n          done = true;\n        };\n      (async () => {\n        locks++;\n        for (;;) {\n          try {\n            const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n            // if done while waiting for connect, release the connection lock right away\n            if (done) return release();\n            const unlisten = emitter.onMessage(id, message => {\n              switch (message.type) {\n                case MessageType.Next:\n                  {\n                    sink.next(message.payload);\n                    return;\n                  }\n                case MessageType.Error:\n                  {\n                    errored = true, done = true;\n                    sink.error(message.payload);\n                    releaser();\n                    return;\n                  }\n                case MessageType.Complete:\n                  {\n                    done = true;\n                    releaser(); // release completes the sink\n                    return;\n                  }\n              }\n            });\n            socket.send(stringifyMessage({\n              id,\n              type: MessageType.Subscribe,\n              payload\n            }, replacer));\n            releaser = () => {\n              if (!done && socket.readyState === WebSocketImpl.OPEN)\n                // if not completed already and socket is open, send complete message to server on release\n                socket.send(stringifyMessage({\n                  id,\n                  type: MessageType.Complete\n                }, replacer));\n              locks--;\n              done = true;\n              release();\n            };\n            // either the releaser will be called, connection completed and\n            // the promise resolved or the socket closed and the promise rejected.\n            // whatever happens though, we want to stop listening for messages\n            await waitForReleaseOrThrowOnClose.finally(unlisten);\n            return; // completed, shouldnt try again\n          } catch (errOrCloseEvent) {\n            if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n          }\n        }\n      })().then(() => {\n        // delivering either an error or a complete terminates the sequence\n        if (!errored) sink.complete();\n      }) // resolves on release or normal closure\n      .catch(err => {\n        sink.error(err);\n      }); // rejects on close events and errors\n      return () => {\n        // dispose only of active subscriptions\n        if (!done) releaser();\n      };\n    },\n    async dispose() {\n      disposed = true;\n      if (connecting) {\n        // if there is a connection, close it\n        const [socket] = await connecting;\n        socket.close(1000, 'Normal Closure');\n      }\n    },\n    terminate() {\n      if (connecting) {\n        // only if there is a connection\n        emitter.emit('closed', {\n          code: 4499,\n          reason: 'Terminated',\n          wasClean: false\n        });\n      }\n    }\n  };\n}\nfunction isLikeCloseEvent(val) {\n  return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n  if ([1000, 1001, 1006, 1005, 1012, 1013, 1013 // Bad Gateway\n  ].includes(code)) return false;\n  // all other internal errors are fatal\n  return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n  return typeof val === 'function' && 'constructor' in val && 'CLOSED' in val && 'CLOSING' in val && 'CONNECTING' in val && 'OPEN' in val;\n}","map":{"version":3,"names":["GRAPHQL_TRANSPORT_WS_PROTOCOL","CloseCode","MessageType","parseMessage","stringifyMessage","isObject","limitCloseReason","createClient","options","url","connectionParams","lazy","onNonLazyError","console","error","lazyCloseTimeout","lazyCloseTimeoutMs","keepAlive","disablePong","connectionAckWaitTimeout","retryAttempts","retryWait","randomisedExponentialBackoff","retries","retryDelay","i","Promise","resolve","setTimeout","Math","floor","random","shouldRetry","isLikeCloseEvent","isFatalConnectionProblem","on","webSocketImpl","generateID","generateUUID","replace","c","r","v","toString","jsonMessageReplacer","replacer","jsonMessageReviver","reviver","ws","isWebSocket","Error","WebSocket","global","MozWebSocket","window","WebSocketImpl","emitter","message","listeners","id","listener","emit","_a","call","connecting","opened","connected","ping","pong","closed","onMessage","event","l","push","splice","indexOf","args","errorOrClosed","cb","listening","err","forEach","unlisten","locks","retrying","disposed","connect","clearTimeout","socket","throwOnClose","denied","undefined","code","reason","connectionAckTimeout","queuedPing","enqueuePing","isFinite","readyState","OPEN","send","type","Ping","errOrEvent","close","onerror","onclose","onopen","payload","ConnectionInit","ConnectionAcknowledgementTimeout","InternalClientError","acknowledged","onmessage","data","Pong","ConnectionAck","_","reject","BadResponse","CLOSING","release","released","race","then","complete","shouldRetryConnectOrThrow","errOrCloseEvent","isFatalInternalCloseCode","InternalServerError","BadRequest","Unauthorized","SubprotocolNotAcceptable","SubscriberAlreadyExists","TooManyInitialisationRequests","includes","subscribe","sink","done","errored","releaser","waitForReleaseOrThrowOnClose","Next","next","Complete","Subscribe","finally","catch","dispose","terminate","wasClean","val"],"sources":["/Users/manojkumars/Documents/graphql_chat/client/node_modules/graphql-ws/lib/client.mjs"],"sourcesContent":["/**\n *\n * client\n *\n */\nimport { GRAPHQL_TRANSPORT_WS_PROTOCOL, CloseCode, MessageType, parseMessage, stringifyMessage, } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        // clear the lazy close timeout immediatelly so that close gets debounced\n        // see: https://github.com/enisdenjo/graphql-ws/issues/388\n        clearTimeout(lazyCloseTimeout);\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting');\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete if the socket is still open.\n                            lazyCloseTimeout = setTimeout(() => {\n                                if (socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeoutMs);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    return {\n        on: emitter.on,\n        subscribe(payload, sink) {\n            const id = generateID(payload);\n            let done = false, errored = false, releaser = () => {\n                // for handling completions before connect\n                locks--;\n                done = true;\n            };\n            (async () => {\n                locks++;\n                for (;;) {\n                    try {\n                        const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                        // if done while waiting for connect, release the connection lock right away\n                        if (done)\n                            return release();\n                        const unlisten = emitter.onMessage(id, (message) => {\n                            switch (message.type) {\n                                case MessageType.Next: {\n                                    sink.next(message.payload);\n                                    return;\n                                }\n                                case MessageType.Error: {\n                                    (errored = true), (done = true);\n                                    sink.error(message.payload);\n                                    releaser();\n                                    return;\n                                }\n                                case MessageType.Complete: {\n                                    done = true;\n                                    releaser(); // release completes the sink\n                                    return;\n                                }\n                            }\n                        });\n                        socket.send(stringifyMessage({\n                            id,\n                            type: MessageType.Subscribe,\n                            payload,\n                        }, replacer));\n                        releaser = () => {\n                            if (!done && socket.readyState === WebSocketImpl.OPEN)\n                                // if not completed already and socket is open, send complete message to server on release\n                                socket.send(stringifyMessage({\n                                    id,\n                                    type: MessageType.Complete,\n                                }, replacer));\n                            locks--;\n                            done = true;\n                            release();\n                        };\n                        // either the releaser will be called, connection completed and\n                        // the promise resolved or the socket closed and the promise rejected.\n                        // whatever happens though, we want to stop listening for messages\n                        await waitForReleaseOrThrowOnClose.finally(unlisten);\n                        return; // completed, shouldnt try again\n                    }\n                    catch (errOrCloseEvent) {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                }\n            })()\n                .then(() => {\n                // delivering either an error or a complete terminates the sequence\n                if (!errored)\n                    sink.complete();\n            }) // resolves on release or normal closure\n                .catch((err) => {\n                sink.error(err);\n            }); // rejects on close events and errors\n            return () => {\n                // dispose only of active subscriptions\n                if (!done)\n                    releaser();\n            };\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', {\n                    code: 4499,\n                    reason: 'Terminated',\n                    wasClean: false,\n                });\n            }\n        },\n    };\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000,\n        1001,\n        1006,\n        1005,\n        1012,\n        1013,\n        1013, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}